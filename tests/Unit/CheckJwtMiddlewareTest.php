<?php


namespace Marketredesign\MrdAuth0Laravel\Tests\Unit;

use Auth0\Login\Auth0JWTUser;
use Illuminate\Foundation\Application;
use Illuminate\Http\Request;
use Marketredesign\MrdAuth0Laravel\Http\Middleware\CheckJWT;
use Marketredesign\MrdAuth0Laravel\Tests\TestCase;
use Symfony\Component\HttpKernel\Exception\HttpException;

class CheckJwtMiddlewareTest extends TestCase
{
    /**
     * Define environment setup.
     *
     * @param  Application  $app
     * @return void
     */
    protected function getEnvironmentSetUp($app)
    {
        // Set the Laravel Auth0 config values which are used to some values.
        $app['config']->set('laravel-auth0', [
            'domain'     => 'auth.marketredesign.com',
            'client_id'  => '123',
        ]);
    }

    /**
     * Verify the request is unauthorized when no bearer token is specified.
     */
    public function testBearerTokenMissing()
    {
        // Mock Auth0 service. This will see any bearer token that we provide as invalid. However, since we do not
        // provide any token at all we test what happens when no bearer token is provided instead.
        $this->mockAuth0Service(null);

        $request = new Request();
        $middleware = app()->make(CheckJWT::class);

        // Sanity check; verify there that is indeed no bearer token present in the request.
        self::assertNull($request->bearerToken());

        try {
            $middleware->handle($request, function () {
                // Next middleware should not be called since there is an error with the request.
                $this->fail();
            });

            // Fail if no exception was thrown.
            $this->fail();
        } catch (HttpException $e) {
            self::assertEquals('Bearer token missing', $e->getMessage());
            self::assertEquals(401, $e->getStatusCode());
        }
    }

    /**
     * Verify the request is unauthorized when the bearer token is invalid.
     */
    public function testInvalidToken()
    {
        // By setting the JWT to null we simulate an invalid token (in the mocked service).
        $this->mockAuth0Service(null);

        $request = new Request();
        $middleware = app()->make(CheckJWT::class);

        // Make sure a bearer token is set.
        $request->headers->set('Authorization', 'Bearer token');

        try {
            $middleware->handle($request, function () {
                // Next middleware should not be called since there is an error with the request.
                $this->fail();
            });

            // Fail if no exception was thrown.
            $this->fail();
        } catch (HttpException $e) {
            // Assert status code.
            // Note that we cannot verify the message since that is generated by the underlying (mocked out) service.
            self::assertEquals(401, $e->getStatusCode());
        }
    }

    /**
     * Verify the request is forbidden when the bearer token contains no scope, but a scope is required.
     */
    public function testScopeRequiredNoneProvided()
    {
        $this->mockAuth0Service([]);

        $request = new Request();
        $middleware = app()->make(CheckJWT::class);

        // Make sure a bearer token is set.
        $request->headers->set('Authorization', 'Bearer token');

        try {
            // Require 'test' scope to be present, however no scope present in the JWT.
            $middleware->handle($request, function () {
                // Next middleware should not be called since there is an error with the request.
                $this->fail();
            }, 'test');

            // Fail if no exception was thrown.
            $this->fail();
        } catch (HttpException $e) {
            self::assertEquals('Insufficient scope', $e->getMessage());
            self::assertEquals(403, $e->getStatusCode());
        }
    }

    /**
     * Verify the request is forbidden when the bearer token contains an empty scope, but a scope is required.
     */
    public function testScopeRequiredEmptyScopesProvided()
    {
        $this->mockAuth0Service(['scope' => '']);

        $request = new Request();
        $middleware = app()->make(CheckJWT::class);

        // Make sure a bearer token is set.
        $request->headers->set('Authorization', 'Bearer token');

        try {
            // Require 'test' scope to be present, however empty scope present in the JWT.
            $middleware->handle($request, function () {
                // Next middleware should not be called since there is an error with the request.
                $this->fail();
            }, 'test');

            // Fail if no exception was thrown.
            $this->fail();
        } catch (HttpException $e) {
            self::assertEquals('Insufficient scope', $e->getMessage());
            self::assertEquals(403, $e->getStatusCode());
        }
    }

    /**
     * Verify the request is forbidden when the bearer token only has a different scope than required.
     */
    public function testScopeRequiredIncorrectScopeProvided()
    {
        $this->mockAuth0Service(['scope' => 'nottest']);

        $request = new Request();
        $middleware = app()->make(CheckJWT::class);

        // Make sure a bearer token is set.
        $request->headers->set('Authorization', 'Bearer token');

        try {
            // Require 'test' scope to be present, however different scope present in the JWT.
            $middleware->handle($request, function () {
                // Next middleware should not be called since there is an error with the request.
                $this->fail();
            }, 'test');

            // Fail if no exception was thrown.
            $this->fail();
        } catch (HttpException $e) {
            self::assertEquals('Insufficient scope', $e->getMessage());
            self::assertEquals(403, $e->getStatusCode());
        }
    }

    /**
     * Verify the request passes when it contains one scope only, which is required.
     */
    public function testScopeRequiredOneScopeProvided()
    {
        $this->mockAuth0Service(['scope' => 'test']);

        $request = new Request();
        $middleware = app()->make(CheckJWT::class);

        // Make sure a bearer token is set.
        $request->headers->set('Authorization', 'Bearer token');

        $nextCalled = false;

        // Require 'test' scope to be present, which is present in the JWT.
        $middleware->handle($request, function () use (&$nextCalled) {
            $nextCalled = true;
        }, 'test');

        // The next middleware should be called since this was a correct request.
        self::assertTrue($nextCalled);
        self::assertEquals($this->userId, $request->user_id);
    }

    /**
     * Verify the request passes when it contains multiple scopes including the one that is required.
     */
    public function testScopeRequiredMultipleScopesProvided()
    {
        $this->mockAuth0Service(['scope' => 'somescope test somethingelse']);

        $request = new Request();
        $middleware = app()->make(CheckJWT::class);

        // Make sure a bearer token is set.
        $request->headers->set('Authorization', 'Bearer token');

        $nextCalled = false;

        // Require 'test' scope to be present, which is present in the JWT.
        $middleware->handle($request, function () use (&$nextCalled) {
            $nextCalled = true;
        }, 'test');

        // The next middleware should be called since this was a correct request.
        self::assertTrue($nextCalled);
        self::assertEquals($this->userId, $request->user_id);
    }

    /**
     * Verify that the request user resolver returns a Auth0JWT user with correct userinfo.
     */
    public function testUserResolver()
    {
        $this->mockAuth0Service(['sub' => 'someuser'], [
            'sub' => 'someuser',
            'given_name' => 'Test',
            'family_name' => 'User',
            'nickname' => 'test.user',
            'name' => 'Test User',
            'email' => 'test.user@company.com',
        ]);

        $request = new Request();
        $middleware = app()->make(CheckJWT::class);

        // Make sure a bearer token is set.
        $request->headers->set('Authorization', 'Bearer token');

        $nextCalled = false;

        $middleware->handle($request, function () use (&$nextCalled) {
            $nextCalled = true;
        });

        // The next middleware should be called since this was a correct request.
        self::assertTrue($nextCalled);
        self::assertEquals('someuser', $request->user_id);

        self::assertInstanceOf(Auth0JWTUser::class, $request->user());
        self::assertEquals('someuser', $request->user()->getAuthIdentifier());
        self::assertEquals('Test', $request->user()->given_name);
        self::assertEquals('User', $request->user()->family_name);
        self::assertEquals('test.user', $request->user()->nickname);
        self::assertEquals('Test User', $request->user()->name);
        self::assertEquals('test.user@company.com', $request->user()->email);
    }
}
